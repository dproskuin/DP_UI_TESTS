# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: E2E tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install Chrome, Firefox and Edge browsers
      run: |
        sudo apt install google-chrome-stable
        
        sudo apt-get install firefox
        
        sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main"
        sudo apt update
        sudo apt install microsoft-edge-stable
        wget https://msedgedriver.azureedge.net/95.0.1020.5/edgedriver_linux64.zip -P ~/
        unzip ~/edgedriver_linux64.zip -d ~/
        rm ~/edgedriver_linux64.zip
        sudo mv -f ~/msedgedriver /usr/local/share/
        sudo chmod 777 /usr/local/share/msedgedriver
        sudo ln -s /usr/local/share/msedgedriver /usr/local/bin/msedgedriver

#    - name: Chrome Tests
#      continue-on-error: true
#      run: |
#        pytest -v --disable-warnings --browser=chrome --headless=on --screenshot=on --screenshot_path=on --html=report.html --junit-xml=junit/test-results-chrome.xml --reruns 3 -n 2


#    - name: Firefox Tests
#      continue-on-error: true
#      run: |
#        pytest -v --disable-warnings --browser=chrome --headless=on --screenshot=on --screenshot_path=on --html=report.html --junit-xml=junit/test-results-firefox.xml --reruns 3 -n 2

    - name: Edge Tests
      continue-on-error: true
      run: |
        pytest -v --disable-warnings --browser=edge --headless=on --screenshot=on --screenshot_path=on --html=report.html --junit-xml=junit/test-results-edge.xml --reruns 3 -n 2
  
    - name: Publish Chrome Test Report
      uses: mikepenz/action-junit-report@v2
      if: always() # always run even if the previous step fails
      with:
        report_paths: 'junit/test-results-chrome.xml'
        
    - name: Publish Firefox Test Report
      uses: mikepenz/action-junit-report@v2
      if: always() # always run even if the previous step fails
      with:
        report_paths: 'junit/test-results-firefox.xml'
      
    - name: Publish Edge Test Report
      uses: mikepenz/action-junit-report@v2
      if: always() # always run even if the previous step fails
      with:
        report_paths: 'junit/test-results-edge.xml'
        
      

    - uses: actions/upload-artifact@v2
      with:
        name: failed-screenshots
        path: screenshot/
    
    - uses: actions/upload-artifact@v2
      with:
        name: html report
        path: report.html
    
    - name: Purge artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        expire-in: 1d 
        token: ${{ secrets.GITHUB_TOKEN }}
